    docs += &doc_category("Stats");

    docs += &doc(models::Route {
        title: "Get List Stats",
        method: "GET",
        path: "/stats",
        description: r#"
Returns the bot list stats. This currently returns the full list of all bots
as a vector/list of IndexBot structs.

As a client, it is your responsibility, to parse this. Pagination may be added
if the list grows and then requires it.
"#,
        path_params: &models::Empty {},
        query_params: &models::Empty {},
        request_body: &models::Empty {},
        response_body: &models::ListStats {
            bots: index_bots,
            ..models::ListStats::default()
        },
        auth_types: vec![],
    });

    docs += &doc_category("Commands");

    docs += &doc(models::Route {
        title: "Create Bot Command",
        method: "POST",
        path: "/bots/{id}/commands",
        description: r#"
Creates a command.

The ``id`` here must be the bot id you wish to add the command for

**This performs a *upsert* meaning it will either create or update 
the command depending on its ``name``.**

**Only post up to 10-20 commands at a time, otherwise requests may be truncated
or otherwise fail with odd errors.  If you have more than this, then perform 
multiple requests**

``target_type`` is a [TargetType](https://lynx.fateslist.xyz/docs/enums-ref#targettype)
"#,
        path_params: &models::FetchBotPath { id: 0 },
        query_params: &models::TargetQuery {
            target_type: models::TargetType::Bot,
        },
        request_body: &models::BotCommandVec {
            commands: vec![models::BotCommand::default()],
        },
        response_body: &models::APIResponse {
            done: true,
            reason: None,
            context: None,
        },
        auth_types: vec![models::RouteAuthType::Bot],
    });

    docs += &doc(models::Route {
        title: "Delete Bot Command",
        method: "DELETE",
        path: "/bots/{id}/commands",
        description: r#"
DELETE a command.

The ``id`` here must be the bot id you wish to add the command for

``names`` and ``ids`` must be a ``|`` seperated list of ``names`` or valid
UUIDs in the case of ids. Bad names/ids will be ignored
"#,
        path_params: &models::FetchBotPath { id: 0 },
        query_params: &models::CommandDeleteQuery {
            nuke: Some(false),
            names: Some("command name|command name 2".to_string()),
            ids: Some("id 1|id 2".to_string()),
        },
        request_body: &models::Empty {},
        response_body: &models::APIResponse {
            done: true,
            reason: None,
            context: None,
        },
        auth_types: vec![models::RouteAuthType::Bot],
    });

    docs += &doc_category("Notifications");

    docs += &doc(models::Route {
        title: "Get Notification Public Info",
        method: "GET",
        path: "/notifications/info",
        description: r#"
Get the public information required for creating a push notification
"#,
        path_params: &models::FetchBotPath { id: 0 },
        query_params:&models::NotificationSub::default(),
        request_body: &models::Empty {},
        response_body: &models::NotificationInfo::default(),
        auth_types: vec![],
    });

    docs += &doc(models::Route {
        title: "Create Push Notification Subscription",
        method: "POST",
        path: "/notifications/{id}/sub",
        description: r#"
Subscribes a user to a push notification.
"#,
        path_params: &models::Empty {},
        query_params: &models::Empty {},
        request_body: &models::Empty {},
        response_body: &models::APIResponse {
            done: true,
            reason: None,
            context: None,
        },
        auth_types: vec![models::RouteAuthType::User],
    });

    docs += &doc(models::Route {
        title: "Create Test Push Notification",
        method: "GET",
        path: "/notifications/{id}/test",
        description: r#"
Creates a test push notification
"#,
        path_params: &models::Empty {},
        query_params: &models::Empty {},
        request_body: &models::Empty {},
        response_body: &models::APIResponse {
            done: true,
            reason: None,
            context: None,
        },
        auth_types: vec![models::RouteAuthType::User],
    });